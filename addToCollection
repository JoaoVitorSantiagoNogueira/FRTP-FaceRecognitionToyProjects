# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# PDX-License-Identifier: MIT-0 (For details, see https://github.com/awsdocs/amazon-rekognition-developer-guide/blob/master/LICENSE-SAMPLECODE.)

import boto3
from PIL import Image
import io

def add_local_faces_to_collection(photo, collection_id, bytes):

    session = boto3.Session()
    client = session.client('rekognition', region_name='us-east-1')

    response = client.index_faces(CollectionId=collection_id,
                                  Image={'Bytes': bytes},
                                  MaxFaces=1,
                                  QualityFilter="AUTO",
                                  DetectionAttributes=['ALL'])

    print('Results for ' + photo)
    print('Faces indexed:')
    for faceRecord in response['FaceRecords']:
        print('  Face ID: ' + faceRecord['Face']['FaceId'])
        print('  Location: {}'.format(faceRecord['Face']['BoundingBox']))

    print('Faces not indexed:')
    for unindexedFace in response['UnindexedFaces']:
        print(' Location: {}'.format(unindexedFace['FaceDetail']['BoundingBox']))
        print(' Reasons:')
        for reason in unindexedFace['Reasons']:
            print('   ' + reason)
    return len(response['FaceRecords'])

def add_bucket_faces_to_collection(bucket, photo, collection_id):

    session = boto3.Session()
    client = session.client('rekognition', region_name='us-east-1')

    ###vers√£o com bucket
    response = client.index_faces(CollectionId=collection_id,
                                  Image={'S3Object': {'Bucket': bucket, 'Name': photo}},
                                  ExternalImageId=photo,
                                  MaxFaces=1,
                                  QualityFilter="AUTO",
                                  DetectionAttributes=['ALL'])

    print('Results for ' + photo)
    print('Faces indexed:')
    for faceRecord in response['FaceRecords']:
        print('  Face ID: ' + faceRecord['Face']['FaceId'])
        print('  Location: {}'.format(faceRecord['Face']['BoundingBox']))

    print('Faces not indexed:')
    for unindexedFace in response['UnindexedFaces']:
        print(' Location: {}'.format(unindexedFace['FaceDetail']['BoundingBox']))
        print(' Reasons:')
        for reason in unindexedFace['Reasons']:
            print('   ' + reason)
    return len(response['FaceRecords'])




def main():
    bucket = 'facial-biometry-pictures'
    collection_id = "FaceTestID"
    photo = '0005f631-f100-4ae3-8e79-0b2bf67c5642.png'


    local = "testimg2.jpg"
    image = Image.open(local)
    stream = io.BytesIO()
    image.save(stream,format="JPEG")
    bytes  = stream.getvalue() 


    indexed_faces_count = add_local_faces_to_collection(photo, collection_id, bytes = bytes)
    #indexed_faces_count = add_bucket_faces_to_collection(bucket, photo, collection_id)
    print("Faces indexed count: " + str(indexed_faces_count))

if __name__ == "__main__":
    main()